
struct Phone {
    var model: String
    var producer: String
    var memorySize: Int?
    var operationSystem: String?
    
    enum OperatingSystem {
        case Android,WindowsPhone,iOS
    }
}

class User {
    var name: String
    var phone: Phone?
    
    init(name: String) {
        self.name = name
    }
    
    func userPhoneDescription() {
        guard let phone = phone else {
            print("Whoops! User don't have a phone.")
            return
        }
        phoneDescription(phone: phone)
    }
}

func phoneDescription(phone: Phone){
    guard let memorySize = phone.memorySize else {
        print("Whoops! They don't have a memorySize.")
        return
    }
    
    guard let operationSystem = phone.operationSystem else {
        print("Whoops! They don't have a operationSystem.")
        return
    }
    
    print("Model: " + phone.model + ",Producer:" + phone.producer + ",MemorySize: " + "\(memorySize)" + ",OperationSystem: " + operationSystem)
}

let phone = Phone(model: "Iphone10", producer: "Apple", memorySize: 100, operationSystem: "Ios1")

phoneDescription(phone: phone)

var phones: [Phone] = []

phones.append(Phone(model: "Iphone12", producer: "Apple", memorySize: 110, operationSystem: "Ios2"))
phones.append(Phone(model: "Iphone13", producer: "Apple", memorySize: 140, operationSystem: "Ios3"))
phones.append(Phone(model: "Iphone14", producer: "Apple", memorySize: 150, operationSystem: "Ios4"))


for phone in phones {
    phoneDescription(phone: phone)
}
